use std::collections::HashMap;

// Define a struct to represent a pentest result
#[derive(Debug, Clone)]
pub struct PentestResult {
    pub test_name: String,
    pub success: bool,
    pub details: String,
}

// Function to perform a basic AI-based pentest
pub fn perform_ai_pentest(target: &str) -> PentestResult {
    // Simulate a pentest operation
    let success = target.contains("vulnerable");
    let details = if success {
        format!("Target {} is vulnerable.", target)
    } else {
        format!("Target {} is secure.", target)
    };

    PentestResult {
        test_name: "Basic AI Pentest".to_string(),
        success,
        details,
    }
}

// Function to summarize pentest results
pub fn summarize_pentest_results(results: &[PentestResult]) -> HashMap<String, usize> {
    let mut summary = HashMap::new();
    for result in results {
        let entry = summary.entry(result.test_name.clone()).or_insert(0);
        if result.success {
            *entry += 1;
        }
    }
    summary
}

// Example usage
fn main() {
    let targets = vec!["server1", "vulnerable_server", "server3"];
    let results: Vec<PentestResult> = targets.iter().map(|&target| perform_ai_pentest(target)).collect();

    for result in &results {
        println!("{:?}", result);
    }

    let summary = summarize_pentest_results(&results);
    println!("Pentest Summary: {:?}", summary);
}