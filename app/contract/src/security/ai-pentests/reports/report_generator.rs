use std::collections::HashMap;
use crate::security::ai_pentests::pentest::ai_pentest_functions::PentestResult;

// Function to generate a detailed report from pentest results
pub fn generate_detailed_report(results: &[PentestResult]) -> String {
    let mut report = String::from("AI Pentest Detailed Report\n\n");

    for result in results {
        report.push_str(&format!(
            "Test Name: {}\nSuccess: {}\nDetails: {}\n\n",
            result.test_name, result.success, result.details
        ));
    }

    report
}

// Function to generate a summary report from pentest results
pub fn generate_summary_report(results: &[PentestResult]) -> String {
    let summary = summarize_pentest_results(results);
    let mut report = String::from("AI Pentest Summary Report\n\n");

    for (test_name, success_count) in summary {
        report.push_str(&format!(
            "Test Name: {}\nSuccessful Tests: {}\n\n",
            test_name, success_count
        ));
    }

    report
}

// Example usage
fn main() {
    let results = vec![
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: true,
            details: "Target server1 is vulnerable.".to_string(),
        },
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: false,
            details: "Target server2 is secure.".to_string(),
        },
    ];

    let detailed_report = generate_detailed_report(&results);
    println!("{}", detailed_report);

    let summary_report = generate_summary_report(&results);
    println!("{}", summary_report);
}