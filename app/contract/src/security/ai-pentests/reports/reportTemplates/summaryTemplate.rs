use std::collections::HashMap;
use crate::security::ai_pentests::pentest::ai_pentest_functions::PentestResult;

// Function to format a summary report using a template
pub fn format_summary_report(results: &[PentestResult]) -> String {
    let summary = summarize_pentest_results(results);
    let mut report = String::from("=== AI Pentest Summary Report ===\n\n");

    for (test_name, success_count) in summary {
        report.push_str(&format!(
            "Test Name: {}\nSuccessful Tests: {}\n\n",
            test_name, success_count
        ));
    }

    report.push_str("=== End of Summary ===\n");
    report
}

// Example usage
fn main() {
    let results = vec![
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: true,
            details: "Target server1 is vulnerable.".to_string(),
        },
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: false,
            details: "Target server2 is secure.".to_string(),
        },
    ];

    let report = format_summary_report(&results);
    println!("{}", report);
}