use crate::security::ai_pentests::pentest::ai_pentest_functions::PentestResult;

// Function to filter successful pentest results
pub fn filter_successful_results(results: &[PentestResult]) -> Vec<PentestResult> {
    results.iter().cloned().filter(|result| result.success).collect()
}

// Function to count the number of successful tests
pub fn count_successful_tests(results: &[PentestResult]) -> usize {
    results.iter().filter(|result| result.success).count()
}

// Function to find a pentest result by test name
pub fn find_result_by_test_name(results: &[PentestResult], test_name: &str) -> Option<PentestResult> {
    results.iter().cloned().find(|result| result.test_name == test_name)
}

// Example usage
fn main() {
    let results = vec![
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: true,
            details: "Target server1 is vulnerable.".to_string(),
        },
        PentestResult {
            test_name: "Basic AI Pentest".to_string(),
            success: false,
            details: "Target server2 is secure.".to_string(),
        },
    ];

    let successful_results = filter_successful_results(&results);
    println!("Successful Results: {:?}", successful_results);

    let success_count = count_successful_tests(&results);
    println!("Number of Successful Tests: {}", success_count);

    if let Some(result) = find_result_by_test_name(&results, "Basic AI Pentest") {
        println!("Found Result: {:?}", result);
    }
}